{"version":3,"sources":["logo.png","name.png","beacon-logo.svg","airgap_logo.svg","Header.tsx","App.tsx","serviceWorker.ts","theme.ts","index.tsx"],"names":["module","exports","Header","props","React","useState","Flex","as","align","justify","wrap","padding","Box","alignItems","flexGrow","Link","href","isExternal","Button","bg","FaGithub","App","Grid","w","paddingBottom","textAlign","justifyItems","src","Name","width","Logo","paddingTop","Text","fontSize","margin","FaDiscord","paddingLeft","FaTelegram","Heading","size","height","List","spacing","icon","color","Beacon","AirGap","Boolean","window","location","hostname","match","breakpoints","breakpointsObject","sm","md","lg","xl","tzTipTheme","theme","ThemedApp","ThemeProvider","StrictMode","CSSReset","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f357bd36.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.476721ba.png\";","module.exports = __webpack_public_path__ + \"static/media/name.48a50fb3.png\";","module.exports = __webpack_public_path__ + \"static/media/beacon-logo.944018ec.svg\";","module.exports = __webpack_public_path__ + \"static/media/airgap_logo.38eff924.svg\";","import React from 'react';\nimport { IconButton, Box, Heading, Flex, Text, Button, Link } from '@chakra-ui/core';\n// 1. import the icon from \"react-icons\"\nimport { FaGithub } from 'react-icons/fa';\n\nconst Header = (props: any) => {\n  const [show, setShow] = React.useState(false);\n\n  return (\n    <Flex as=\"nav\" align=\"center\" justify=\"space-between\" wrap=\"wrap\" padding=\"1.5rem\" {...props}>\n      <Box alignItems=\"center\" flexGrow={1}></Box>\n\n      <Link href=\"https://github.com/AndreasGassmann/tztip.me\" isExternal>\n        <Button bg=\"transparent\">\n          <Box as={FaGithub} />\n        </Button>\n      </Link>\n    </Flex>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport Header from './Header';\nimport Logo from './logo.png';\nimport Name from './name.png';\nimport Beacon from './beacon-logo.svg';\nimport AirGap from './airgap_logo.svg';\nimport { FaDiscord, FaTelegram } from 'react-icons/fa';\n\nimport {\n  Heading,\n  Stack,\n  Flex,\n  Box,\n  Grid,\n  Image,\n  Link,\n  Text,\n  Button,\n  List,\n  ListItem,\n  ListIcon,\n  AspectRatioBox,\n} from '@chakra-ui/core';\n\nconst App = () => {\n  return (\n    <>\n      <Header />\n      <Grid>\n        <Box w=\"100%\" paddingBottom=\"40px\" textAlign=\"center\" justifyItems=\"justify\">\n          <Flex justify=\"center\">\n            <img src={Name} width=\"200px\"></img>\n          </Flex>\n          <Flex justify=\"center\">\n            <img src={Logo} width=\"200px\"></img>\n          </Flex>\n          <Flex paddingTop=\"20px\" justify=\"center\">\n            <Text fontSize=\"lg\">Easy Tips on Tezos</Text>\n          </Flex>\n\n          <Flex paddingTop=\"50px\" justify=\"center\">\n            <Link href=\"https://discord.gg/bDXqrdS\" isExternal>\n              <Button margin=\"10px\">\n                <Box as={FaDiscord} />\n                <Text paddingLeft=\"10px\">Discord</Text>\n              </Button>\n            </Link>\n            <Link href=\"https://telegram.me/tztipbot\" isExternal>\n              <Button margin=\"10px\">\n                <Box as={FaTelegram} />\n                <Text paddingLeft=\"10px\">Telegram</Text>\n              </Button>\n            </Link>\n          </Flex>\n        </Box>\n      </Grid>\n      <Grid>\n        <Box w=\"100%\" padding=\"40px\" textAlign=\"center\" bg=\"#F9F9F9\">\n          Enable Tezos Tips on any website or platform. Use <b>your wallet</b> to tip. Funds are transferred directly\n          from one user to the other. TzTip has no access to your balance.\n        </Box>\n      </Grid>\n      <Grid>\n        <Box w=\"100%\" padding=\"40px\" textAlign=\"center\">\n          <Flex justify=\"center\" paddingBottom=\"20px\">\n            <Heading as=\"h2\" size=\"md\">\n              How it works (Discord, desktop)\n            </Heading>\n          </Flex>\n          <Flex justify=\"center\">\n            <iframe width=\"550\" height=\"310\" src=\"https://www.youtube.com/embed/QP3UJtcpSxM\"></iframe>\n          </Flex>\n        </Box>\n      </Grid>\n\n      <Grid>\n        <Box w=\"100%\" padding=\"40px\" textAlign=\"center\" bg=\"#F9F9F9\">\n          <Heading as=\"h2\" size=\"md\" paddingBottom=\"50px\">\n            Features\n          </Heading>\n          <List spacing={6}>\n            <ListItem>\n              <ListIcon icon=\"check-circle\" color=\"green.500\" />\n              Control your own private key\n            </ListItem>\n            <ListItem>\n              <ListIcon icon=\"check-circle\" color=\"green.500\" />\n              Send transactions, delegation requests and contract calls\n            </ListItem>\n            <ListItem>\n              <ListIcon icon=\"check-circle\" color=\"green.500\" />\n              Sign arbitrary messages\n            </ListItem>\n          </List>\n        </Box>\n      </Grid>\n      <Grid>\n        <Box w=\"100%\" padding=\"40px\" textAlign=\"center\">\n          <Flex justify=\"center\" paddingBottom=\"20px\">\n            <Heading as=\"h2\" size=\"md\">\n              How it works (Discord, mobile)\n            </Heading>\n          </Flex>\n          <Flex justify=\"center\">\n            <iframe width=\"550\" height=\"310\" src=\"https://www.youtube.com/embed/sKlO-VXfhj4\"></iframe>\n          </Flex>\n        </Box>\n      </Grid>\n      <Grid>\n        <Box w=\"100%\" padding=\"40px\" textAlign=\"center\">\n          <Flex justify=\"center\" paddingBottom=\"20px\">\n            <Heading as=\"h2\" size=\"md\">\n              How it works (Telegram, mobile)\n            </Heading>\n          </Flex>\n          <Flex justify=\"center\">\n            <iframe width=\"550\" height=\"310\" src=\"https://www.youtube.com/embed/1s6PzfmCgHI\"></iframe>\n          </Flex>\n        </Box>\n      </Grid>\n      <Grid>\n        <Box w=\"100%\" padding=\"40px\" textAlign=\"center\" bg=\"#F9F9F9\">\n          Communication between TzTip and wallets is using the beacon network, a distributed P2P network. Anyone can\n          participate.\n          <Link href=\"https://walletbeacon.io\" isExternal>\n            <img src={Beacon} width=\"200px\"></img>\n          </Link>\n        </Box>\n      </Grid>\n\n      <Grid>\n        <Box w=\"100%\" padding=\"40px\" textAlign=\"center\" bg=\"#F9F9F9\">\n          <Link href=\"https://airgap.it\" isExternal>\n            <img src={AirGap} width=\"200px\"></img>\n          </Link>\n        </Box>\n      </Grid>\n\n      <Grid>\n        <Box w=\"100%\" padding=\"40px\" textAlign=\"center\">\n          <Text>Made with ☕ and 🍫 in Switzerland</Text>\n        </Box>\n      </Grid>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { theme } from '@chakra-ui/core';\n\nconst breakpoints = ['360px', '768px', '1024px', '1440px'];\nconst breakpointsObject: any = {};\nbreakpointsObject.sm = breakpoints[0];\nbreakpointsObject.md = breakpoints[1];\nbreakpointsObject.lg = breakpoints[2];\nbreakpointsObject.xl = breakpoints[3];\n\nconst tzTipTheme = {\n  ...theme,\n  breakpointsObject,\n};\n\nexport { tzTipTheme };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ThemeProvider, CSSReset } from '@chakra-ui/core';\n\nimport { tzTipTheme } from './theme';\n\nconst ThemedApp = () => (\n  <ThemeProvider theme={tzTipTheme}>\n    <React.StrictMode>\n      <CSSReset />\n      <App />\n    </React.StrictMode>\n  </ThemeProvider>\n);\n\nReactDOM.render(<ThemedApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}